// Mocks generated by Mockito 5.4.6 from annotations
// in ecommerce_app/test/features/chat/presentation/bloc/chat_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:dartz/dartz.dart' as _i3;
import 'package:ecommerce_app/core/errors/failures.dart' as _i6;
import 'package:ecommerce_app/features/chat/domain/entities/chat.dart' as _i7;
import 'package:ecommerce_app/features/chat/domain/entities/message.dart'
    as _i9;
import 'package:ecommerce_app/features/chat/domain/repositories/chat_repository.dart'
    as _i2;
import 'package:ecommerce_app/features/chat/domain/usecases/delete_chat.dart'
    as _i11;
import 'package:ecommerce_app/features/chat/domain/usecases/get_chat_messages.dart'
    as _i8;
import 'package:ecommerce_app/features/chat/domain/usecases/get_my_chats.dart'
    as _i4;
import 'package:ecommerce_app/features/chat/domain/usecases/initiate_chat.dart'
    as _i10;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeChatRepository_0 extends _i1.SmartFake
    implements _i2.ChatRepository {
  _FakeChatRepository_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [GetMyChats].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetMyChats extends _i1.Mock implements _i4.GetMyChats {
  MockGetMyChats() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ChatRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeChatRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.ChatRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, List<_i7.Chat>>> call() =>
      (super.noSuchMethod(
            Invocation.method(#call, []),
            returnValue:
                _i5.Future<_i3.Either<_i6.Failure, List<_i7.Chat>>>.value(
                  _FakeEither_1<_i6.Failure, List<_i7.Chat>>(
                    this,
                    Invocation.method(#call, []),
                  ),
                ),
          )
          as _i5.Future<_i3.Either<_i6.Failure, List<_i7.Chat>>>);
}

/// A class which mocks [GetChatMessages].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetChatMessages extends _i1.Mock implements _i8.GetChatMessages {
  MockGetChatMessages() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ChatRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeChatRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.ChatRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, List<_i9.Message>>> call(String? chatId) =>
      (super.noSuchMethod(
            Invocation.method(#call, [chatId]),
            returnValue:
                _i5.Future<_i3.Either<_i6.Failure, List<_i9.Message>>>.value(
                  _FakeEither_1<_i6.Failure, List<_i9.Message>>(
                    this,
                    Invocation.method(#call, [chatId]),
                  ),
                ),
          )
          as _i5.Future<_i3.Either<_i6.Failure, List<_i9.Message>>>);
}

/// A class which mocks [InitiateChat].
///
/// See the documentation for Mockito's code generation for more information.
class MockInitiateChat extends _i1.Mock implements _i10.InitiateChat {
  MockInitiateChat() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ChatRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeChatRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.ChatRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, _i7.Chat>> call(String? userId) =>
      (super.noSuchMethod(
            Invocation.method(#call, [userId]),
            returnValue: _i5.Future<_i3.Either<_i6.Failure, _i7.Chat>>.value(
              _FakeEither_1<_i6.Failure, _i7.Chat>(
                this,
                Invocation.method(#call, [userId]),
              ),
            ),
          )
          as _i5.Future<_i3.Either<_i6.Failure, _i7.Chat>>);
}

/// A class which mocks [DeleteChat].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeleteChat extends _i1.Mock implements _i11.DeleteChat {
  MockDeleteChat() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ChatRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeChatRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.ChatRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, _i3.Unit>> call(String? chatId) =>
      (super.noSuchMethod(
            Invocation.method(#call, [chatId]),
            returnValue: _i5.Future<_i3.Either<_i6.Failure, _i3.Unit>>.value(
              _FakeEither_1<_i6.Failure, _i3.Unit>(
                this,
                Invocation.method(#call, [chatId]),
              ),
            ),
          )
          as _i5.Future<_i3.Either<_i6.Failure, _i3.Unit>>);
}
